@page "/peliculas/editar/{PeliculaId:int}"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager

<h3>Editar Pelicula</h3>
@if (Pelicula == null)
{
    <text>Cargando..</text>
}
else
{
    <FormularioPelicula Pelicula="Pelicula" OnValidSubmit="Editar" GenerosNoSeleccionados="GenerosNoSeleccionados"
                        GenerosSeleccionados="GenerosSeleccionados" ActoresSeleccionados="ActoresSeleccionados"/>
}

@code {

    private Pelicula Pelicula;
    [Parameter] public int PeliculaId { get; set; }
    private List<Genero> GenerosNoSeleccionados = new List<Genero>();
    private List<Genero> GenerosSeleccionados = new List<Genero>();
    private List<Persona> ActoresSeleccionados = new List<Persona>();


    protected async override Task OnInitializedAsync()
    {
        var httpResponse = await repositorio.Get<PeliculaActualizacionDTO>($"api/peliculas/actualizar/{PeliculaId}");

        if (httpResponse.Error)
        {
            if (httpResponse.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("");
            }
            else
            {
                Console.WriteLine(await httpResponse.GetBody());
            }
        }
        else
        {
            var model = httpResponse.Response;
            Pelicula = model.Pelicula;
            GenerosNoSeleccionados = model.GenerosNoSeleccionados;
            GenerosSeleccionados = model.GenerosSeleccionados;
            ActoresSeleccionados = model.Actores;
        }



    }

    private async Task Editar()
    {
        var httpResponse = await repositorio.Put("api/peliculas", Pelicula);
        if (httpResponse.Error)
        {
            Console.WriteLine(await httpResponse.GetBody());
        }
        else
        {
            navigationManager.NavigateTo($"pelicula/{PeliculaId}");
        }
    }
}
